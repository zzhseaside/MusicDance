CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        maxUVY: {
          value: 0.1,
          editor: {
            tooltip: "最大的值",
            range: [0.0, 1.0],
          }
        }
        # 自定义参数
        startColor: {
          value: [1.0, 1.0, 1.0, 1.0], 
          editor: { 
            type: color,
            tooltip: "上部分颜色"
          } 
        }
        endColor: {
          value: [1.0, 1.0, 1.0, 1.0], 
          editor: { 
            type: color,
            tooltip: "下部分颜色"
          } 
        }
        
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  #if USE_TEXTURE
    in vec2 a_uv0;
  #endif

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
      v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_uv0 = a_texCoord;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif


  uniform ARGS{ 
    float maxUVY;
  };

  uniform Light {
    vec4 startColor;
    vec4 endColor;
  };

  float block = 10.0; // 固定10个格子 , 
  float inter = 0.02; // 间隔占比, 
  float height = 0.08; // 瓦片高度占比 ,

  vec4 frag() {
		vec4 o = vec4(1, 1, 1, 1);
    // #if USE_TEXTURE
    //   o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);
    // #endif
    o *= v_color;
    float startY = 1.0 - v_uv0.y;
    //做方块切割
    // 判断这个点位是空白的还是能上色
    float line = inter + height;
    float item = startY / line - floor(startY / line);
    if (item < (inter / line)){
      o.a = 0.0;
    }else{
      if (startY < maxUVY){
        // 对颜色进行渐变
        vec4 finalColor = mix(startColor, endColor, startY / maxUVY);
        o *= finalColor;
      }else { 
        o.a = 0.0;
      }
    }
    ALPHA_TEST(o);
    return o;
  }
}%